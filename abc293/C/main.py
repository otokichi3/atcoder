#!/usr/bin/env python3
import sys


ans = 0


def solve(H: int, W: int, A: "List[List[int]]"):
    def f(x, y, seen):
        global ans

        # 行き止まっていればカウントアップ（重複なく到達した）
        if x + 1 == H and y + 1 == W:
            ans += 1
            return

        if x + 1 < H:
            # 次の数字がすでに記録されていなければ探索を続ける
            if A[x + 1][y] not in seen:
                seen.add(A[x + 1][y])
                f(x + 1, y, seen)
                seen.remove(A[x + 1][y])

        if y + 1 < W:
            # 次の数字がすでに記録されていなければ探索を続ける
            if A[x][y + 1] not in seen:
                seen.add(A[x][y + 1])
                f(x, y + 1, seen)
                seen.remove(A[x][y + 1])

    # set はハッシュテーブルのため in 比較演算子による比較が list に比べ高速
    f(0, 0, set([A[0][0]]))
    print(ans)

    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word

    tokens = iterate_tokens()
    H = int(next(tokens))  # type: int
    W = int(next(tokens))  # type: int
    A = [
        [int(next(tokens)) for _ in range(W)] for _ in range(H)
    ]  # type: "List[List[int]]"
    solve(H, W, A)


if __name__ == "__main__":
    main()
